(Project.config "title" "openapi-client")
(Project.config "compiler" "gcc -lm")
(Project.no-echo)
;;(Project.config "search-path" "lib/socket")

(load "src/hmac-sha1.carp")
(use HmacSha1)
(use IO)

(load "src/sockets.carp")
(use Socket)

(load "src/system-ext.carp")
(use System)

;; (load "src/http-parser.carp")
;; (use HttpParser)

;; (defn main []
;;   (Socket.with-server sock @"127.0.0.1" 8080
;;     (Socket.while-connection sock client (send client (read client)))))

(def app-key "4b71f4fd1dec2809940abe0c558d6fc6")
(def app-secret "d88986f75ee86951e59b49cff68244f90ae0b3e7eafdf19681b6b61f57fc7e91")

(deftype Context
    [
     prog String
     host String
     port Int
     box String
     cmd String
     board Int
     lock Int
     locks (Array Int)
     speaker Int
     audio Int
     heart-rate Int
     timeout Int
     volume Int
     charger Int
     charging Int
     heating Int
     egg Int
     cabin Int
     gpio Int
     ])

(defn RFC-1123-date [t]
  (System.strftime "%a, %d %b %Y %H:%M:%S +0000" t)
  )

(defn join-less-than [x]
  (String.concat &[@"> " @x @"\n"]))

(defn join-greater-than [x]
  (String.concat &[@"< " @x @"\n"]))

(defn print-request [content]
  (println &(String.concat &(Array.copy-map join-less-than &(String.lines content)))))

(defn print-response [content]
  (println &(String.concat &(Array.copy-map join-greater-than &(String.lines content)))))

(defn get [sock host path headers]
  (let-do [headerstr (String.join @"\r\n" headers)
           request &(String.concat &[@"GET " path @" HTTP/1.1\r\nHost: " host @"\r\nContent-Length: 0\r\n" headerstr @"\r\n\r\n"])]
    (Socket.send sock request)
    (print-request request)
    (Socket.read sock)))

(defn put [sock host path headers body]
  (let-do [headerstr (String.join @"\r\n" headers)
           request &(String.concat &[@"PUT " path @" HTTP/1.1\r\nHost: " host @"\r\nContent-Length: " (Int.str (String.length &body)) @"\r\n" headerstr @"\r\n\r\n" body])]
    (Socket.send sock request)
    (print-request request)
    (Socket.read sock)))

(defn post [sock host path headers body]
  (let-do [headerstr (String.join @"\r\n" headers)
           request &(String.concat &[@"POST " path @" HTTP/1.1\r\nHost: " host @"\r\nContent-Length: " (Int.str (String.length &body)) @"\r\n" headerstr @"\r\n\r\n" body])]
    (Socket.send sock request)
    (print-request request)
    (Socket.read sock)))

(defn lock-off [sock host box board lock]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        signature (HmacSha1.digest app-secret &(String.concat &[@"lock-off/" @box @"/locks/" (Int.str board) @"/" (Int.str lock) @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(put sock @host (String.concat &[@"/" @box @"/locks/" (Int.str board) @"/" (Int.str lock)]) &[auth date] @"")]
    (print-response result)))

(defn int->string [i]
  (Int.str @(the &Int i)))

(defn locks-off [sock host box board locks]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        body &(String.concat &[@"locks=" (String.join-with-char \, &(the (Array String) (Array.copy-map int->string (the &(Array Int) locks))))])
        signature (HmacSha1.digest app-secret &(String.concat &[@"locks-off/" @box @"/locks/" (Int.str board) @body @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        content-type @"Content-Type: application/x-www-form-urlencoded"
        result &(post sock @host (String.concat &[@"/" @box @"/locks/" (Int.str board)]) &[content-type auth date] @body)]
    (print-response result)))

(defn lock-status [sock host box board locks]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        lockstr &(String.join-with-char \, &(the (Array String) (Array.copy-map int->string (the &(Array Int) locks))))
        signature (HmacSha1.digest app-secret &(String.concat &[@"lock-status/" @box @"/locks/" (Int.str board) @"/" @lockstr  @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(get sock @host (String.concat &[@"/" @box @"/locks/" (Int.str board) @"/" @lockstr]) &[auth date])]
    (print-response result)))

(defn lock-off-and-status [sock host box board lock]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        signature (HmacSha1.digest app-secret &(String.concat &[@"lock-off-and-status/" @box @"/lock-off-and-status/" (Int.str board) @"/" (Int.str lock) @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(put sock @host (String.concat &[@"/" @box @"/lock-off-and-status/" (Int.str board) @"/" (Int.str lock)]) &[auth date] @"")]
    (print-response result)))

(defn locks-off-and-status [sock host box board locks]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        body &(String.concat &[@"locks=" (String.join-with-char \, &(the (Array String) (Array.copy-map int->string (the &(Array Int) locks))))])
        signature (HmacSha1.digest app-secret &(String.concat &[@"locks-off-and-status/" @box @"/lock-off-and-status/" (Int.str board) @body @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        content-type @"Content-Type: application/x-www-form-urlencoded"
        result &(post sock @host (String.concat &[@"/" @box @"/lock-off-and-status/" (Int.str board)]) &[content-type auth date] @body)]
    (print-response result)))

(defn charger-status [sock host box charger]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        signature (HmacSha1.digest app-secret &(String.concat &[@"charger-status/" @box @"/chargers/" (Int.str charger) @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(get sock @host (String.concat &[@"/" @box @"/chargers/" (Int.str charger)]) &[auth date])]
    (print-response result)))

(defn charger-config [sock host box charger]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        signature (HmacSha1.digest app-secret &(String.concat &[@"charger-config/" @box @"/chargers/" (Int.str charger) @"/config" @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(get sock @host (String.concat &[@"/" @box @"/chargers/" (Int.str charger) @"/config"]) &[auth date])]
    (print-response result)))

(defn config-charger [sock host box charger charging heating]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        body &(String.concat &[@"enable-charging=" (Int.str charging) @"&enable-heating=" (Int.str heating)])
        signature (HmacSha1.digest app-secret &(String.concat &[@"config-charger/" @box @"/chargers/" (Int.str charger) @body @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        content-type @"Content-Type: application/x-www-form-urlencoded"
        result &(post sock @host (String.concat &[@"/" @box @"/chargers/" (Int.str charger)]) &[content-type auth date] @body)]
    (print-response result)))

(defn light-on [sock host box]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        signature (HmacSha1.digest app-secret &(String.concat &[@"light-on/" @box @"/light/on" @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(put sock @host (String.concat &[@"/" @box @"/light/on"]) &[auth date] @"")]
    (print-response result)))

(defn light-off [sock host box]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        signature (HmacSha1.digest app-secret &(String.concat &[@"light-off/" @box @"/light/off" @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(put sock @host (String.concat &[@"/" @box @"/light/off"]) &[auth date] @"")]
    (print-response result)))

(defn ultraviolet-on [sock host box]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        signature (HmacSha1.digest app-secret &(String.concat &[@"ultraviolet-on/" @box @"/ultraviolet/on" @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(put sock @host (String.concat &[@"/" @box @"/ultraviolet/on"]) &[auth date] @"")]
    (print-response result)))

(defn ultraviolet-off [sock host box]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        signature (HmacSha1.digest app-secret &(String.concat &[@"ultraviolet-off/" @box @"/ultraviolet/off" @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(put sock @host (String.concat &[@"/" @box @"/ultraviolet/off"]) &[auth date] @"")]
    (print-response result)))

(defn camera-on [sock host box]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        signature (HmacSha1.digest app-secret &(String.concat &[@"camera-on/" @box @"/camera/on" @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(put sock @host (String.concat &[@"/" @box @"/camera/on"]) &[auth date] @"")]
    (print-response result)))

(defn camera-off [sock host box]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        signature (HmacSha1.digest app-secret &(String.concat &[@"camera-off/" @box @"/camera/off" @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(put sock @host (String.concat &[@"/" @box @"/camera/off"]) &[auth date] @"")]
    (print-response result)))

(defn fan-on [sock host box]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        signature (HmacSha1.digest app-secret &(String.concat &[@"fan-on/" @box @"/fan/on" @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(put sock @host (String.concat &[@"/" @box @"/fan/on"]) &[auth date] @"")]
    (print-response result)))

(defn fan-off [sock host box]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        signature (HmacSha1.digest app-secret &(String.concat &[@"fan-off/" @box @"/fan/off" @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(put sock @host (String.concat &[@"/" @box @"/fan/off"]) &[auth date] @"")]
    (print-response result)))

(defn play [sock host box speaker audio]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        signature (HmacSha1.digest app-secret &(String.concat &[@"play/" @box @"/speakers/" (Int.str speaker) @"/audios/" (Int.str audio) @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(put sock @host (String.concat &[@"/" @box @"/speakers/" (Int.str speaker) @"/audios/" (Int.str audio)]) &[auth date] @"")]
    (print-response result)))

(defn volume-up [sock host box speaker]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        signature (HmacSha1.digest app-secret &(String.concat &[@"volume-up/" @box @"/speakers/" (Int.str speaker) @"/volume/up" @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(put sock @host (String.concat &[@"/" @box @"/speakers/" (Int.str speaker) @"/volume/up"]) &[auth date] @"")]
    (print-response result)))

(defn volume-down [sock host box speaker]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        signature (HmacSha1.digest app-secret &(String.concat &[@"volume-down/" @box @"/speakers/" (Int.str speaker) @"/volume/down" @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(put sock @host (String.concat &[@"/" @box @"/speakers/" (Int.str speaker) @"/volume/down"]) &[auth date] @"")]
    (print-response result)))

(defn volume [sock host box speaker vol]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        signature (HmacSha1.digest app-secret &(String.concat &[@"volume/" @box @"/speakers/" (Int.str speaker) @"/volume/" (Int.str vol) @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(put sock @host (String.concat &[@"/" @box @"/speakers/" (Int.str speaker) @"/volume/" (Int.str vol)]) &[auth date] @"")]
    (print-response result)))

(defn config-network [sock host box heart-rate timeout]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        body &(String.concat &[@"network-heart-rate=" (Int.str heart-rate) @"&network-timeout=" (Int.str timeout)])
        signature (HmacSha1.digest app-secret &(String.concat &[@"config-network/" @box @"/network/" @body @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        content-type @"Content-Type: application/x-www-form-urlencoded"
        result &(post sock @host (String.concat &[@"/" @box @"/network"]) &[content-type auth date] @body)]
    (print-response result)))

(defn token [sock host box board lock]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        signature (HmacSha1.digest app-secret &(String.concat &[@"get-token/" @box @"/token/" (Int.str board) @"/" (Int.str lock) @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(get sock @host (String.concat &[@"/" @box @"/token/" (Int.str board) @"/" (Int.str lock)]) &[auth date])]
    (print-response result)))

(defn tokens [sock host box board locks]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        lockstr &(String.join-with-char \, &(the (Array String) (Array.copy-map int->string (the &(Array Int) locks))))
        signature (HmacSha1.digest app-secret &(String.concat &[@"get-token/" @box @"/token/" (Int.str board) @"/" @lockstr @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(get sock @host (String.concat &[@"/" @box @"/token/" (Int.str board) @"/" @lockstr]) &[auth date])]
    (print-response result)))

(defn online [sock host box]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        signature (HmacSha1.digest app-secret &(String.concat &[@"online-detect/" @box @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(get sock @host (String.concat &[@"/" @box]) &[auth date])]
    (print-response result)))

(defn ping [sock host box]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        signature (HmacSha1.digest app-secret &(String.concat &[@"ping/" @box @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(put sock @host (String.concat &[@"/" @box]) &[auth date] @"")]
    (print-response result)))

(defn egg-lock-off [sock host box egg cabin]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        signature (HmacSha1.digest app-secret &(String.concat &[@"egg-lock-off/" @box @"/eggs/" (Int.str egg) @"/" (Int.str cabin) @"/off" @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(put sock @host (String.concat &[@"/" @box @"/eggs/" (Int.str egg) @"/" (Int.str cabin) @"/off"]) &[auth date] @"")]
    (print-response result)))

(defn egg-lock-on [sock host box egg cabin]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        signature (HmacSha1.digest app-secret &(String.concat &[@"egg-lock-on/" @box @"/eggs/" (Int.str egg) @"/" (Int.str cabin) @"/on" @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(put sock @host (String.concat &[@"/" @box @"/eggs/" (Int.str egg) @"/" (Int.str cabin) @"/on"]) &[auth date] @"")]
    (print-response result)))

(defn egg-play [sock host box egg audio]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        signature (HmacSha1.digest app-secret &(String.concat &[@"egg-play/" @box @"/eggs/" (Int.str egg) @"/audios/" (Int.str audio) @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(put sock @host (String.concat &[@"/" @box @"/eggs/" (Int.str egg) @"/audios/" (Int.str audio)]) &[auth date] @"")]
    (print-response result)))

(defn egg-gpio [sock host box egg gpio]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        signature (HmacSha1.digest app-secret &(String.concat &[@"egg-gpio/" @box @"/eggs/" (Int.str egg) @"/gpio/" (Int.str gpio) @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(put sock @host (String.concat &[@"/" @box @"/eggs/" (Int.str egg) @"/gpio/" (Int.str gpio)]) &[auth date] @"")]
    (print-response result)))

(defn egg-volume [sock host box egg vol]
  (let [datestr &(RFC-1123-date (Long.from-int (System.time)))
        signature (HmacSha1.digest app-secret &(String.concat &[@"egg-volume/" @box @"/eggs/" (Int.str egg) @"/volume/" (Int.str vol) @datestr]))
        auth (String.join @": " &[@"Authorization" (String.concat &[@app-key @":" signature])])
        date (String.join @": " &[@"Date" @datestr])
        result &(put sock @host (String.concat &[@"/" @box @"/eggs/" (Int.str egg) @"/volume/" (Int.str vol)]) &[auth date] @"")]
    (print-response result)))

(defn do-work [context]
  (let-do [host (Context.host context)]
    (Socket.with-client sock host @(Context.port context)
      (let [box (Context.box context)
            cmd (Context.cmd context)]
        (cond
          (String.= cmd "lock-off")
          (lock-off sock host box @(Context.board context) @(Context.lock context))
          (String.= cmd "locks-off")
          (locks-off sock host box @(Context.board context) (Context.locks context))
          (String.= cmd "lock-status")
          (if (> (Array.length (Context.locks context)) 1)
            (lock-status sock host box @(Context.board context) (Context.locks context))
            (lock-status sock host box @(Context.board context) &[@(Context.lock context)]))
          ;; (lock-status sock host box @(Context.board context) &[@(Context.lock context)])
          (String.= cmd "lock-off-and-status")
          (lock-off-and-status sock host box @(Context.board context) @(Context.lock context))
          (String.= cmd "locks-off-and-status")
          (locks-off-and-status sock host box @(Context.board context) (Context.locks context))
          (String.= cmd "charger-status")
          (charger-status sock host box @(Context.charger context))
          (String.= cmd "charger-config")
          (charger-config sock host box @(Context.charger context))
          (String.= cmd "config-charger")
          (config-charger sock host box @(Context.charger context) @(Context.charging context) @(Context.heating context))
          (String.= cmd "light-on")
          (light-on sock host box)
          (String.= cmd "light-off")
          (light-off sock host box)
          (String.= cmd "ultraviolet-on")
          (ultraviolet-on sock host box)
          (String.= cmd "ultraviolet-off")
          (ultraviolet-off sock host box)
          (String.= cmd "camera-on")
          (camera-on sock host box)
          (String.= cmd "camera-off")
          (camera-off sock host box)
          (String.= cmd "fan-on")
          (fan-on sock host box)
          (String.= cmd "fan-off")
          (fan-off sock host box)
          (String.= cmd "play")
          (play sock host box @(Context.speaker context) @(Context.audio context))
          (String.= cmd "volume-up")
          (volume-up sock host box @(Context.speaker context))
          (String.= cmd "volume-down")
          (volume-down sock host box @(Context.speaker context))
          (String.= cmd "volume")
          (volume sock host box @(Context.speaker context) @(Context.volume context))
          (String.= cmd "config-network")
          (config-network sock host box @(Context.heart-rate context) @(Context.timeout context))
          (String.= cmd "token")
          (token sock host box @(Context.board context) @(Context.lock context))
          (String.= cmd "tokens")
          (tokens sock host box @(Context.board context) (Context.locks context))
          (String.= cmd "online")
          (online sock host box)
          (String.= cmd "ping")
          (ping sock host box)
          (String.= cmd "egg-lock-on")
          (egg-lock-on sock host box @(Context.egg context) @(Context.cabin context))
          (String.= cmd "egg-lock-off")
          (egg-lock-off sock host box @(Context.egg context) @(Context.cabin context))
          (String.= cmd "egg-play")
          (egg-play sock host box @(Context.egg context) @(Context.audio context))
          (String.= cmd "egg-gpio")
          (egg-gpio sock host box @(Context.egg context) @(Context.gpio context))
          (String.= cmd "egg-volume")
          (egg-volume sock host box @(Context.egg context) @(Context.volume context))
          (println "Uknown cmd"))))))

(defn usage [prog]
  (do
    (println &(String.format "Usage: %s [-host host] [-port port] <-box box> <command> [options]" prog))
    (println "-host <string>")
    (println "-port <number>                              (1~65535)")
    (println "-box <string>")
    (println "Command:")
    (println "  lock-off")
    (println "           -board <number>                  (1~8)")
    (println "           -lock <number>                   (1~20)")
    (println "  locks-off")
    (println "           -board <number>                  (1~8)")
    (println "           -locks <number1>,<number2>, ...  (1~20)")
    (println "  lock-status")
    (println "           -board <number>                  (1~8)")
    (println "           -lock <number>                   (1~20)")
    (println "           -locks <number1>,<number2>, ...  (1~20)")
    (println "  lock-off-and-status")
    (println "           -board <number>                  (1~8)")
    (println "           -lock <number>                   (1~20)")
    (println "  locks-off-and-status")
    (println "           -board <number>                  (1~8)")
    (println "           -locks <number1>,<number2>, ...  (1~20)")
    (println "  charger-status")
    (println "           -charger <number>                (1~8)")
    (println "  charger-config")
    (println "           -charger <number>                (1~8)")
    (println "  config-charger")
    (println "           -charger <number>                (1~8)")
    (println "           -charging <number>               (0~15)")
    (println "           -heating <number>                (0~15)")
    (println "  light-on")
    (println "  light-off")
    (println "  ultraviolet-on")
    (println "  ultraviolet-off")
    (println "  camera-on")
    (println "  camera-off")
    (println "  fan-on")
    (println "  fan-off")
    (println "  play")
    (println "           -speaker <number>                (1~8)")
    (println "           -audio <number>                  (1~9999)")
    (println "  volume-up")
    (println "           -speaker <number>                (1~8 or 255)")
    (println "  volume-down")
    (println "           -speaker <number>                (1~8 or 255)")
    (println "  volume")
    (println "           -speaker <number>                (1~8 or 255)")
    (println "           -volume <number>                 (0~31)")
    (println "  config-network")
    (println "           -heart-rate <number>             [15, 31, 63, 127, 255]")
    (println "           -timeout <number>                (600~90000)")
    (println "  token")
    (println "           -board <number>                  (1~8)")
    (println "           -lock <number>                   (1~20)")
    (println "  tokens")
    (println "           -board <number>                  (1~8)")
    (println "           -locks <number1>,<number2>       (1~20)")
    (println "  online")
    (println "  ping")
    (println "  egg-lock-on")
    (println "           -egg <number>                    (1~8)")
    (println "           -cabin <number>                  (1~16)")
    (println "  egg-lock-off")
    (println "           -egg <number>                    (1~8)")
    (println "           -cabin <number>                  (1~16)")
    (println "  egg-play")
    (println "           -egg <number>                    (1~8)")
    (println "           -audio <number>                  (1~9999)")
    (println "  egg-gpio")
    (println "           -egg <number>                    (1~8)")
    (println "           -gpio <number>                   (0~15)")
    (println "  egg-volume")
    (println "           -egg <number>                    (1~8 or 255)")
    (println "           -volume <number>                 (0~31)")))

(defn board-in-region? [board]
  (and (> board 0) (< board 9)))

(defn lock-in-region? [lock]
  (and (> lock 0) (< lock 21)))

(defn charger-in-region? [charger]
  (and (> charger 0) (< charger 9)))

(defn charging-in-region? [charging]
  (and (>= charging 0) (< charging 16)))

(defn heating-in-region? [heating]
  (and (>= heating 0) (< heating 16)))

(defn speaker-in-region? [speaker]
  (or (and (> speaker 0) (< speaker 9)) (= speaker 255)))

(defn audio-in-region? [audio]
  (and (> audio 0) (< audio 10000)))

(defn volume-in-region? [speaker]
  (and (>= speaker 0) (< speaker 32)))

(defn heart-rate-in-region? [heart-rate]
  (or* (= heart-rate 15) (= heart-rate 31) (= heart-rate 63) (= heart-rate 127) (= heart-rate 255)))

(defn timeout-in-region? [timeout]
  (and (> timeout 599) (< timeout 90001)))

(defn reduce-lock-in-region [acc lock]
  (and @acc (lock-in-region? @lock)))

(defn egg-in-region? [egg]
  (and (> egg 0) (< egg 9)))

(defn cabin-in-region? [cabin]
  (and (> cabin 0) (< cabin 17)))

(defn gpio-in-region? [gpio]
  (and (>= gpio 0) (< gpio 16)))

(defn verify-context [context]
  (let [cmd (Context.cmd context)]
    (and
      (> (String.length (Context.box context)) 0)
      (or* (and* (String.= "lock-off" cmd)
             (board-in-region? @(Context.board context))
             (lock-in-region? @(Context.lock context)))
        (and* (String.= "locks-off" cmd)
          (board-in-region? @(Context.board context))
          (> (Array.length (Context.locks context)) 0)
          (Array.reduce reduce-lock-in-region true (Context.locks context)))
        (and* (String.= "lock-status" cmd)
          (board-in-region? @(Context.board context))
          (or (lock-in-region? @(Context.lock context))
            (and (> (Array.length (Context.locks context)) 0)
              (Array.reduce reduce-lock-in-region true (Context.locks context)))))
        (and* (String.= "lock-off-and-status" cmd)
          (board-in-region? @(Context.board context))
          (lock-in-region? @(Context.lock context)))
        (and* (String.= "locks-off-and-status" cmd)
          (board-in-region? @(Context.board context))
          (> (Array.length (Context.locks context)) 0)
          (Array.reduce reduce-lock-in-region true (Context.locks context)))
        (and (String.= "charger-status" cmd)
          (charger-in-region? @(Context.charger context)))
        (and (String.= "charger-config" cmd)
          (charger-in-region? @(Context.charger context)))
        (and* (String.= "config-charger" cmd)
          (charger-in-region? @(Context.charger context))
          (charging-in-region? @(Context.charging context))
          (heating-in-region? @(Context.heating context)))
        (and* (String.= "play" cmd)
          (speaker-in-region? @(Context.speaker context))
          (audio-in-region? @(Context.audio context)))
        (and* (String.= "volume-up" cmd)
          (speaker-in-region? @(Context.speaker context)))
        (and* (String.= "volume-down" cmd)
          (speaker-in-region? @(Context.speaker context)))
        (and* (String.= "volume" cmd)
          (speaker-in-region? @(Context.speaker context))
          (volume-in-region? @(Context.volume context)))
        (and* (String.= "config-network" cmd)
          (heart-rate-in-region? @(Context.heart-rate context))
          (timeout-in-region? @(Context.timeout context)))
        (and* (String.= "token" cmd)
             (board-in-region? @(Context.board context))
             (lock-in-region? @(Context.lock context)))
        (and* (String.= "tokens" cmd)
          (board-in-region? @(Context.board context))
          (> (Array.length (Context.locks context)) 0)
          (Array.reduce reduce-lock-in-region true (Context.locks context)))
        (and* (String.= "egg-lock-on" cmd)
          (egg-in-region? @(Context.egg context))
          (cabin-in-region? @(Context.cabin context)))
        (and* (String.= "egg-lock-off" cmd)
          (egg-in-region? @(Context.egg context))
          (cabin-in-region? @(Context.cabin context)))
        (and* (String.= "egg-play" cmd)
          (egg-in-region? @(Context.egg context))
          (audio-in-region? @(Context.audio context)))
        (and* (String.= "egg-gpio" cmd)
          (egg-in-region? @(Context.egg context))
          (gpio-in-region? @(Context.gpio context)))
        (and* (String.= "egg-volume" cmd)
          (egg-in-region? @(Context.egg context))
          (volume-in-region? @(Context.volume context)))
        (String.= "light-on" cmd)
        (String.= "light-off" cmd)
        (String.= "ultraviolet-on" cmd)
        (String.= "ultraviolet-off" cmd)
        (String.= "camera-on" cmd)
        (String.= "camera-off" cmd)
        (String.= "fan-on" cmd)
        (String.= "fan-off" cmd)
        (String.= "online" cmd)
        (String.= "ping" cmd)))))

(defn parse-args-recursive [context args i]
  (if (= i (Array.length args))
    context
    (let [arg (Array.nth args i)]
      (cond
        (String.= "lock-off" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "locks-off" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "lock-status" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "lock-off-and-status" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "locks-off-and-status" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "charger-status" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "charger-config" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "config-charger" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "light-on" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "light-off" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "ultraviolet-on" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "ultraviolet-off" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "camera-on" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "camera-off" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "fan-on" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "fan-off" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "play" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "volume" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "volume-up" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "volume-down" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "config-network" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "token" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "tokens" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "online" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "ping" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "egg-lock-on" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "egg-lock-off" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "egg-play" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "egg-gpio" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (String.= "egg-volume" arg)
        (parse-args-recursive (Context.set-cmd context @arg) args (+ i 1))
        (if (String.starts-with? arg "-")
          (let [param &(String.suffix-string arg 1)]
            (if (> (- (Array.length args) i) 1)
              (let [value (Array.nth args (+ i 1))]
                (cond
                  (String.= "board" param)
                  (parse-args-recursive (Context.set-board context (Int.from-string value)) args (+ i 2))
                  (String.= "lock" param)
                  (parse-args-recursive (Context.set-lock context (Int.from-string value)) args (+ i 2))
                  (String.= "locks" param)
                  (parse-args-recursive (Context.set-locks context (Array.copy-map Int.from-string &(String.split-by value &[\,]))) args (+ i 2))
                  (String.= "charger" param)
                  (parse-args-recursive (Context.set-charger context (Int.from-string value)) args (+ i 2))
                  (String.= "charging" param)
                  (parse-args-recursive (Context.set-charging context (Int.from-string value)) args (+ i 2))
                  (String.= "heating" param)
                  (parse-args-recursive (Context.set-heating context (Int.from-string value)) args (+ i 2))
                  (String.= "speaker" param)
                  (parse-args-recursive (Context.set-speaker context (Int.from-string value)) args (+ i 2))
                  (String.= "audio" param)
                  (parse-args-recursive (Context.set-audio context (Int.from-string value)) args (+ i 2))
                  (String.= "host" param)
                  (parse-args-recursive (Context.set-host context @value) args (+ i 2))
                  (String.= "port" param)
                  (parse-args-recursive (Context.set-port context (Int.from-string value)) args (+ i 2))
                  (String.= "box" param)
                  (parse-args-recursive (Context.set-box context @value) args (+ i 2))
                  (String.= "heart-rate" param)
                  (parse-args-recursive (Context.set-heart-rate context (Int.from-string value)) args (+ i 2))
                  (String.= "timeout" param)
                  (parse-args-recursive (Context.set-timeout context (Int.from-string value)) args (+ i 2))
                  (String.= "volume" param)
                  (parse-args-recursive (Context.set-volume context (Int.from-string value)) args (+ i 2))
                  (String.= "egg" param)
                  (parse-args-recursive (Context.set-egg context (Int.from-string value)) args (+ i 2))
                  (String.= "cabin" param)
                  (parse-args-recursive (Context.set-cabin context (Int.from-string value)) args (+ i 2))
                  (String.= "gpio" param)
                  (parse-args-recursive (Context.set-gpio context (Int.from-string value)) args (+ i 2))
                  (parse-args-recursive context args (+ i 2))))
              (parse-args-recursive context args (+ i 1))))
          (parse-args-recursive context args (+ i 1)))))))

(defn parse-args [prog args]
  (let-do [context &(Context.init @prog @"" 5080 @"" @"" 0 0 [] 255 0 31 9000 15 1 0 0 1 1 0)
           parsed &(parse-args-recursive @context args 0)]
    (if (verify-context parsed)
      (do-work parsed)
      (usage prog))))

(defn main []
  (let [args (the (Ref (Array String)) &(System.arguments))]
    (if (= (Array.length args) 1)
      (usage (the (Ref String) &(Array.first args)))
      (let [rest &(Array.suffix-array args 1)]
        (parse-args (the (Ref String) &(Array.first args)) rest)))))
